@PART:HAS[#RRConverter[Set]]:NEEDS[!KerbalismDefault,!ClassicStock]:FOR[RationalResourcesParts]
{
	@RRConverter = isSet

	+MODULE[ModuleResourceConverter],0
	{
		@ConverterName = Basic // using moles
		@StartActionName = Start ISRU [Basic]
		@StopActionName = Stop ISRU [Basic]
		@ToggleActionName = Toggle ISRU [Basic]
		Tag = RR
		!INPUT_RESOURCE:HAS[~ResourceName[ElectricCharge]],* {}
		!OUTPUT_RESOURCE,* {}
		
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.55
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.0341 // 1
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.0768 // 12
			FlowMode = STAGE_PRIORITY_FLOW
			DumpExcess = True
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Kerolox B // using moles
		@StartActionName = Start ISRU [Kerolox B]
		@StopActionName = Stop ISRU [Kerolox B]
		@ToggleActionName = Toggle ISRU [Kerolox B]
		Tag = RR
		!INPUT_RESOURCE:HAS[~ResourceName[ElectricCharge]],* {}
		!OUTPUT_RESOURCE,* {}
		
		INPUT_RESOURCE
		{
			ResourceName = LqdHydrogen
			Ratio = 0.3699 // 13
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdCO2
			Ratio = 0.4501 // 12
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.0341 // 1
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.0768 // 12
			FlowMode = STAGE_PRIORITY_FLOW
			DumpExcess = True
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Kerosene // using kilos
		@StartActionName = Start ISRU [Kerosene]
		@StopActionName = Stop ISRU [Kerosene]
		@ToggleActionName = Toggle ISRU [Kerosene]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 1.85
		}
		INPUT_RESOURCE
		{
			ResourceName = Carbon
			Ratio = 0.345
			FlowMode = STAGE_PRIORITY_FLOW
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@Ratio = 0.3712
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Hydrolox // using kilos
		@StartActionName = Start ISRU [Hydrolox]
		@StopActionName = Stop ISRU [Hydrolox]
		@ToggleActionName = Toggle ISRU [Hydrolox]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Water
			@Ratio = 3.6
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 0.888
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@Ratio = 0.0592
			@DumpExcess = True
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Methalox // using kilos
		@StartActionName = Start ISRU [Methalox]
		@StopActionName = Stop ISRU [Methalox]
		@ToggleActionName = Toggle ISRU [Methalox]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 3.765
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdCO2
			Ratio = 2.51
			FlowMode = STAGE_PRIORITY_FLOW
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = LqdMethane
			@Ratio = 3.772
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@Ratio = 0.32
			@DumpExcess = True
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = LqdAmmonia // using moles
		@StartActionName = Start ISRU [LqdAmmonia]
		@StopActionName = Stop ISRU [LqdAmmonia]
		@ToggleActionName = Toggle ISRU [LqdAmmonia]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 0.8536 // 30
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdNitrogen
			Ratio = 0.3396 // 10
			FlowMode = STAGE_PRIORITY_FLOW
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = LqdAmmonia
			@Ratio = 0.4851 // 20
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = MonoPropellant // using moles
		@StartActionName = Start ISRU [MonoPropellant A]
		@StopActionName = Stop ISRU [MonoPropellant A]
		@ToggleActionName = Toggle ISRU [MonoPropellant A]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 0.5691 // 20
		}
		INPUT_RESOURCE
		{
			ResourceName = LqdNitrogen
			Ratio = 0.3396 // 10
			FlowMode = STAGE_PRIORITY_FLOW
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = MonoPropellant
			@Ratio = 0.0427 // 10
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = MonoPropellant + Hydrogen // using moles
		@StartActionName = Start ISRU [MonoPropellant B]
		@StopActionName = Stop ISRU [MonoPropellant B]
		@ToggleActionName = Toggle ISRU [MonoPropellant B]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = LqdAmmonia
			@Ratio = 0.4851 // 20
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = MonoPropellant
			@Ratio = 0.0427 // 10
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = LqdHydrogen
			@Ratio = 0.2845 // 10
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Carbon Extractor // using moles
		@StartActionName = Start ISRU [Carbon Extractor]
		@StopActionName = Stop ISRU [Carbon Extractor]
		@ToggleActionName = Toggle ISRU [Carbon Extractor]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]] // 1:1
		{
			@Ratio = 0.0601 // 2.8985
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Carbon
			@Ratio = 0.1201 // 50
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = CO2 Fuser // using moles
		@StartActionName = Start ISRU [CO2 Fuser]
		@StopActionName = Stop ISRU [CO2 Fuser]
		@ToggleActionName = Toggle ISRU [CO2 Fuser]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Carbon
			@Ratio = 0.024 // 10
		}
		INPUT_RESOURCE
		{
			ResourceName = Oxygen
			Ratio = 22.69504 // 10
			FlowMode = STAGE_PRIORITY_FLOW
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = CarbonDioxide
			@Ratio = 22.5818 // 10
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = CO2 Splitter // using moles
		@StartActionName = Start ISRU [CO2 Splitter]
		@StopActionName = Stop ISRU [CO2 Splitter]
		@ToggleActionName = Toggle ISRU [CO2 Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = CarbonDioxide
			@Ratio = 22.5818 // 10
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Oxygen
			@Ratio = 22.69504 // 10
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Carbon
			@Ratio = 0.024 // 10
			@DumpExcess = True
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Hydrates Splitter // using moles
		@StartActionName = Start ISRU [Hydrates Splitter]
		@StopActionName = Stop ISRU [Hydrates Splitter]
		@ToggleActionName = Toggle ISRU [Hydrates Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Hydrates
			@Ratio = 0.3014 // 2.6803
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Water
			@Ratio = 0.1802 // 1
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = XenonGas
			@Ratio = 0.0144 // 0.011; nerfed for gameplay balance
			%DumpExcess = True
		}
		+OUTPUT_RESOURCE:HAS[#ResourceName[XenonGas]]
		{
			@ResourceName = ArgonGas
			@Ratio = 0.8957 // 0.02; nerfed to 1/100 for gameplay balance
		}
		+OUTPUT_RESOURCE:HAS[#ResourceName[XenonGas]]
		{
			@ResourceName = MetalOre
			@Ratio = 0.0129 // 3
		}
		+OUTPUT_RESOURCE:HAS[#ResourceName[XenonGas]]
		{
			@ResourceName = MetallicOre
			@Ratio = 0.06098
		}
		+OUTPUT_RESOURCE:HAS[#ResourceName[XenonGas]]
		{
			@ResourceName = Oxygen
			@Ratio = 68.0851 // 3
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Water Splitter // using kilos
		@StartActionName = Start ISRU [Water Splitter]
		@StopActionName = Stop ISRU [Water Splitter]
		@ToggleActionName = Toggle ISRU [Water Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Water
			@Ratio = 1.8
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Hydrogen
			@Ratio = 2236.777
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Oxygen
			@Ratio = 1133.66
		}
		+OUTPUT_RESOURCE,0
		{
			@ResourceName = Deuterium
			@Ratio = 1.74
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[!RationalResourcesAluminium]
	{
		@ConverterName = Alumina Splitter // using moles
		@StartActionName = Start ISRU [Alumina Splitter]
		@StopActionName = Stop ISRU [Alumina Splitter]
		@ToggleActionName = Toggle ISRU [Alumina Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Alumina
			@Ratio = 0.2562 // 10
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Metal
			@Ratio = 0.1002 // 7
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Oxygen
			@Ratio = 113.4752 // 5
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[RationalResourcesAluminium]
	{
		@ConverterName = Alumina Splitter // using moles
		@StartActionName = Start ISRU [Alumina Splitter]
		@StopActionName = Stop ISRU [Alumina Splitter]
		@ToggleActionName = Toggle ISRU [Alumina Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Alumina
			@Ratio = 0.2562 // 10
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Aluminium
			@Ratio = 0.01948 // 20
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Oxygen
			@Ratio = 340.4255
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Monazite Splitter // using moles
		@StartActionName = Start ISRU [Monazite Splitter]
		@StopActionName = Stop ISRU [Monazite Splitter]
		@ToggleActionName = Toggle ISRU [Monazite Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Monazite
			@Ratio = 0.0468 // 1
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = RareMetals
			@Ratio = 0.025 // 1
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Phosphorus
			@Ratio = 0.0062 // 1
		}
		+OUTPUT_RESOURCE:HAS[#ResourceName[Phosphorus]]
		{
			@ResourceName = Oxygen
			@Ratio = 22.695 // 1
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]
	{
		@ConverterName = Silicates Splitter // using moles
		@StartActionName = Start ISRU [Silicates Splitter]
		@StopActionName = Stop ISRU [Silicates Splitter]
		@ToggleActionName = Toggle ISRU [Silicates Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Silicates
			@Ratio = 0.0609 // 2
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Silicon
			@Ratio = 0.0241 // 1.998
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Oxygen
			@Ratio = 68.0851 // 3
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[!RationalResourcesAluminium]
	{
		@ConverterName = Spodumene Splitter // using moles
		@StartActionName = Start ISRU [Spodumene Splitter]
		@StopActionName = Stop ISRU [Spodumene Splitter]
		@ToggleActionName = Toggle ISRU [Spodumene Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Spodumene
			@Ratio = 0.06 // 1
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Lithium
			@Ratio = 0.013 // 1
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Metal
			@Ratio = 0.0132 // 0.9228
		}
		+OUTPUT_RESOURCE,0
		{
			@ResourceName = Silicates
			@Ratio = 0.0304 // 1
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[RationalResourcesAluminium]
	{
		@ConverterName = Spodumene Splitter // using moles
		@StartActionName = Start ISRU [Spodumene Splitter]
		@StopActionName = Stop ISRU [Spodumene Splitter]
		@ToggleActionName = Toggle ISRU [Spodumene Splitter]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Spodumene
			@Ratio = 0.06 // 1
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Lithium
			@Ratio = 0.013 // 1
			%DumpExcess = True
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Aluminium
			@Ratio = 0.0097 // 1
		}
		+OUTPUT_RESOURCE,0
		{
			@ResourceName = Silicates
			@Ratio = 0.00609 // 2
		}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[KerbalHealth]
	{
		@ConverterName = Lead Extractor
		@StartActionName = Start ISRU [Lead Extractor]
		@StopActionName = Stop ISRU [Lead Extractor]
		@ToggleActionName = Toggle ISRU [Lead Extractor]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = MetalOre
			@Ratio = 0.03921830769 // Same input rate by mass as alumina splitter
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Lead
			@Ratio = 0.00899185185 // 10:1 input/output ratio by mass
			%DumpExcess = False
		}
		!OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]] {}
	}
	+MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]]:NEEDS[DeepFreeze]
	{
		@ConverterName = Glykerol // Glycerol, C3H8O3
		@StartActionName = Start ISRU [Glykerol]
		@StopActionName = Stop ISRU [Glykerol]
		@ToggleActionName = Toggle ISRU [Glykerol]
		@INPUT_RESOURCE:HAS[#ResourceName[Ore]]
		{
			@ResourceName = Water
			@Ratio = 0.00010867519
		}
		INPUT_RESOURCE
		{
			ResourceName = Carbon
			Ratio = 0.00002587720
			FlowMode = STAGE_PRIORITY_FLOW
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[LiquidFuel]]
		{
			@ResourceName = Glykerol
			@Ratio = 0.00011574074 // calibrated for 5 units every 12 hours
			%DumpExcess = False
		}
		@OUTPUT_RESOURCE:HAS[#ResourceName[Oxidizer]]
		{
			@ResourceName = Oxygen
			@Ratio = 0.01711235940
			%DumpExcess = True // Byproduct
		}
	}
	@MODULE[ModuleResourceConverter]:HAS[#Tag[RR]],*
	{
		@INPUT_RESOURCE:HAS[~ResourceName[ElectricCharge]],*
		{
			@Ratio *= #$/RRPower$
		}
		@OUTPUT_RESOURCE,*
		{
			@Ratio *= #$/RRPower$
		}
	}
	!MODULE[ModuleResourceConverter]:HAS[#ConverterName[Basic]] {}
}

// If mod parts, purge untagged converter options
@PART:HAS[#RRConverter[isSet],~isStock]:NEEDS[!KerbalismDefault,!ClassicStock]:FOR[RationalResourcesParts]
{
	!MODULE[ModuleResourceConverter]:HAS[~Tag[RR]],* {}
}